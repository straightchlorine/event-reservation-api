services:
  db:
    image: postgres
    restart: always
    container_name: postgres
    hostname: ${DB_HOST}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      # - db-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${DB_USER}
      PGUSER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      NC_USER: ${NC_DB_USER}
      NC_PASSWORD: ${NC_DB_PASSWORD}
      NC_NAME: ${NC_DB_NAME}
    healthcheck:
      test: ['CMD-SHELL', "pg_isready", "-U ${DB_USER}", "-d ${DB_NAME}"]
      interval: 5s # test intervals, adjust if dataset gets bigger
      timeout: 3s
      start_period: 5s
      retries: 5
  nocodb:
    image: nocodb/nocodb
    container_name: nocodb-dashboard
    ports:
      - "${NC_DB_PORT}:${NC_DB_PORT}"
    # volumes:
    #   - nocodb-data:/usr/app/data/
    environment:
      - NC_DB=pg://${DB_HOST}:${DB_PORT}?u=${NC_DB_USER}&p=${NC_DB_PASSWORD}&d=${NC_DB_NAME}
      - NC_AUTH_JWT_SECRET=${NC_AUTH_JWT}
      - PORT=${NC_DB_PORT}
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
  event-api:
    container_name: event-api
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      JWT_SECRET: ${API_JWT_SECRET}
      ROOT_NAME: ${API_ROOT_NAME}
      ROOT_PASSWORD: ${API_ROOT_PASSWORD}
      TOKEN_VALID_HOURS: ${API_TOKEN_VALID_HOURS}
    depends_on:
      db:
        condition: service_healthy
        restart: true
    ports:
      - "${API_PORT}:${API_PORT}"

# volumes:
#   db-data:
#   nocodb-data:
