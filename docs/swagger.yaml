basePath: /api/
definitions:
  models.CreateEventRequest:
    properties:
      available_tickets:
        example: 20000
        type: integer
      date:
        example: "2024-12-31T20:00:00Z"
        type: string
      location:
        $ref: '#/definitions/models.CreateLocationRequest'
      name:
        example: Champions League Final
        type: string
      price:
        example: 99.99
        type: number
    type: object
  models.CreateLocationRequest:
    properties:
      address:
        example: 123 Main St
        type: string
      capacity:
        example: 50000
        type: integer
      country:
        example: USA
        type: string
      stadium:
        example: National Stadium
        type: string
    type: object
  models.CreateReservationPayload:
    properties:
      event_id:
        example: 101
        type: integer
      tickets:
        items:
          properties:
            type:
              example: STANDARD
              type: string
          type: object
        type: array
    type: object
  models.ErrorResponse:
    properties:
      message:
        example: An error occurred
        type: string
    type: object
  models.EventResponse:
    properties:
      available_tickets:
        example: 15000
        type: integer
      date:
        example: "2024-12-31T20:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      location:
        $ref: '#/definitions/models.LocationResponse'
      name:
        example: Champions League Final
        type: string
      price:
        example: 99.99
        type: number
    type: object
  models.EventsResponse:
    properties:
      events:
        items:
          $ref: '#/definitions/models.EventResponse'
        type: array
    type: object
  models.LocationResponse:
    properties:
      address:
        example: Wembley Park, London
        type: string
      capacity:
        example: 90000
        type: integer
      country:
        example: England
        type: string
      id:
        example: 101
        type: integer
      stadium:
        example: Wembley Stadium
        type: string
    type: object
  models.LocationsResponse:
    properties:
      locations:
        items:
          $ref: '#/definitions/models.LocationResponse'
        type: array
    type: object
  models.LoginRequest:
    properties:
      password:
        example: securepassword
        type: string
      username:
        example: user123
        type: string
    type: object
  models.LoginResponse:
    properties:
      exp:
        example: 1683649261
        type: integer
      token:
        example: jwt-token-string
        type: string
      user:
        $ref: '#/definitions/models.UserUsernameID'
    type: object
  models.ReservationResponse:
    properties:
      created_at:
        example: "2024-12-01T15:30:00Z"
        type: string
      event:
        $ref: '#/definitions/models.EventResponse'
      id:
        example: res123
        type: string
      status:
        example: CONFIRMED
        type: string
      tickets:
        items:
          $ref: '#/definitions/models.TicketResponse'
        type: array
      total_tickets:
        example: 5
        type: integer
      user:
        example: johndoe
        type: string
    type: object
  models.ReservationTicketsResponse:
    properties:
      reservation_id:
        example: res123
        type: string
      tickets:
        items:
          $ref: '#/definitions/models.TicketResponse'
        type: array
      user:
        example: johndoe
        type: string
    type: object
  models.ReservationsResponse:
    properties:
      reservations:
        items:
          $ref: '#/definitions/models.ReservationResponse'
        type: array
    type: object
  models.SuccessResponse:
    properties:
      message:
        example: Operation successful
        type: string
    type: object
  models.SuccessResponseCreate:
    properties:
      id:
        example: 1
        type: integer
      message:
        example: Object created successfully
        type: string
    type: object
  models.SuccessResponseCreateUUID:
    properties:
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      message:
        example: Object created successfully
        type: string
    type: object
  models.TicketResponse:
    properties:
      id:
        example: abc123
        type: string
      price:
        example: 150
        type: number
      status:
        example: available
        type: string
      type:
        example: STANDARD
        type: string
    type: object
  models.UpdateEventRequest:
    properties:
      available_tickets:
        example: 15000
        type: integer
      date:
        example: "2024-12-25T18:00:00Z"
        type: string
      location:
        $ref: '#/definitions/models.UpdateLocationRequest'
      name:
        example: Christmas Special
        type: string
      price:
        example: 49.99
        type: number
    type: object
  models.UpdateLocationRequest:
    properties:
      address:
        example: 456 Elm St
        type: string
      capacity:
        example: 75000
        type: integer
      country:
        example: Canada
        type: string
      stadium:
        example: Maple Leaf Stadium
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        example: "2024-01-01T10:00:00Z"
        type: string
      email:
        example: johndoe@example.com
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      is_active:
        example: true
        type: boolean
      last_login:
        example: "2024-12-01T15:30:00Z"
        type: string
      name:
        example: John
        type: string
      role_id:
        example: admin
        type: string
      surname:
        example: Doe
        type: string
      username:
        example: johndoe
        type: string
    type: object
  models.UserTicketResponse:
    properties:
      event:
        $ref: '#/definitions/models.EventResponse'
      id:
        example: ticket123
        type: string
      price:
        example: 50
        type: number
      reservation_id:
        example: res123
        type: string
      status:
        example: SOLD
        type: string
      type:
        example: STANDARD
        type: string
    type: object
  models.UserTicketsResponse:
    properties:
      tickets:
        items:
          $ref: '#/definitions/models.UserTicketResponse'
        type: array
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  models.UserUsernameID:
    properties:
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      username:
        example: root
        type: string
    type: object
  models.UsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: Simple API for managing ticket reservations.
  title: Ticket Reservation API
  version: "1.0"
paths:
  /events:
    get:
      description: Retrieve a list of all events with their details and locations.
      operationId: api.getEvents
      produces:
      - application/json
      responses:
        "200":
          description: List of events
          schema:
            $ref: '#/definitions/models.EventsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all events
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Parse the payload and create a new event with provided dataset.
      operationId: api.createEvent
      parameters:
      - description: Payload to create an event
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Event created successfully
          schema:
            $ref: '#/definitions/models.SuccessResponseCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new event (admin only).
      tags:
      - events
  /events/{id}:
    delete:
      description: Delete event by its ID.
      operationId: api.deleteEvent
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            $ref: '#/definitions/models.SuccessResponseCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an existing event (admin only).
      tags:
      - events
    get:
      description: Retrieve an event with its details and location.
      operationId: api.getEventByID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event details
          schema:
            $ref: '#/definitions/models.EventResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get an event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update event details based on the provided payload.
      operationId: api.updateEvent
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Payload to update an event
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing event (admin only).
      tags:
      - events
  /locations:
    get:
      description: Retrieve a list of all locations.
      operationId: api.getLocations
      produces:
      - application/json
      responses:
        "200":
          description: List of locations
          schema:
            $ref: '#/definitions/models.LocationsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all locations.
      tags:
      - locations
    put:
      consumes:
      - application/json
      description: Parse the payload and create a new location with provided dataset.
      operationId: api.createLocation
      parameters:
      - description: Payload to create a location
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Location created successfully
          schema:
            $ref: '#/definitions/models.SuccessResponseCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new location (admin only).
      tags:
      - locations
  /locations/{id}:
    delete:
      description: Delete a location by its ID.
      operationId: api.deleteLocation
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            $ref: '#/definitions/models.SuccessResponseCreate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an existing location (admin only).
      tags:
      - locations
    get:
      description: Retrieve a single location by ID.
      operationId: api.getLocationByID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Location details
          schema:
            $ref: '#/definitions/models.LocationResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Retrieve a location.
      tags:
      - locations
    put:
      consumes:
      - application/json
      description: Update location details based on the provided payload.
      operationId: api.updateLocation
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      - description: Payload to update a location
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing location (admin only).
      tags:
      - locations
  /login:
    post:
      consumes:
      - application/json
      description: Pass username and password to authenticate and get a JWT token.
      operationId: api.login
      parameters:
      - description: Login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login to the API.
      tags:
      - auth
  /logout:
    post:
      description: Invalidate currently used JWT token.
      operationId: api.logout
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged out
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout from the API (admin or registered user)
      tags:
      - auth
  /reservations:
    get:
      description: Retrieve a list of all reservations, including their details and
        tickets they reserve.
      operationId: api.getReservations
      produces:
      - application/json
      responses:
        "200":
          description: List of reservations
          schema:
            $ref: '#/definitions/models.ReservationsResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all reservations (admin only).
      tags:
      - reservations
    put:
      description: Parse provided payload and create reservation and tickets within
        the database.
      operationId: api.createReservation
      parameters:
      - description: Payload to create a reservation
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateReservationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Reservation created successfully
          schema:
            $ref: '#/definitions/models.SuccessResponseCreateUUID'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a reservation (owner/admin only).
      tags:
      - reservations
  /reservations/{id}:
    delete:
      description: Delete a single reservation along with its tickets from the database.
      operationId: api.deleteReservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reservation deleted successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a reservation by ID (admin only).
      tags:
      - reservations
    get:
      description: Retrieve a single reservation, including their details and tickets
        they reserve.
      operationId: api.getReservationsByID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reservation details
          schema:
            $ref: '#/definitions/models.ReservationResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a reservation by ID (admin/owner only).
      tags:
      - reservations
  /reservations/{id}/cancel:
    post:
      description: Set statuses of reservation and its tickets to cancelled.
      operationId: api.cancelReservation
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reservation canceled successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel a reservation (owner/admin only).
      tags:
      - reservations
  /reservations/{id}/tickets:
    get:
      description: Retrieve all tickets associated with a specific reservation by
        its ID.
      operationId: api.getReservationTicketsByID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of tickets for the reservation
          schema:
            $ref: '#/definitions/models.ReservationTicketsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List tickets attributed to given reservation (owner/admin only).
      tags:
      - reservations
  /reservations/user:
    get:
      description: Retrieve a list of current user's reservations along with details
        and tickets they reserve.
      operationId: api.getReservationsForCurrentUser
      produces:
      - application/json
      responses:
        "200":
          description: List of reservations for the user
          schema:
            $ref: '#/definitions/models.ReservationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user reservations for currently logged in user.
      tags:
      - reservations
  /reservations/user/{id}:
    get:
      description: Retrieve a list of all reservations made by a specific user, including
        their details and tickets they reserve.
      operationId: api.getReservationsForUserByID
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of reservations for the user
          schema:
            $ref: '#/definitions/models.ReservationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user reservations (admin/owner only)
      tags:
      - reservations
  /reservations/user/{id}/tickets:
    get:
      description: Retrieve a list of user's tickets.
      operationId: api.getReservationTicketsForUserByID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of tickets belonging to the user
          schema:
            $ref: '#/definitions/models.UserTicketsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user tickets (admin/owner only).
      tags:
      - reservations
  /reservations/user/tickets:
    get:
      description: Retrieve a list of current user's tickets.
      operationId: api.getReservationTicketsForCurrentUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of tickets belonging to the user
          schema:
            $ref: '#/definitions/models.UserTicketsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List user tickets for currently logged in user.
      tags:
      - reservations
  /users:
    get:
      description: Retrieve a list of all users, including their details and roles.
      operationId: api.getUsers
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            $ref: '#/definitions/models.UsersResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List all users (admin only).
      tags:
      - users
    put:
      description: Create a user with registered role based on provided payload. Request
        to create an admin user made by user without already admin status will be
        rejected.
      operationId: api.createUser
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.SuccessResponseCreateUUID'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user (open to create a user with registered role).
      tags:
      - users
  /users/{id}:
    delete:
      description: Deletes user from the database.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user (admin/owner only).
      tags:
      - users
    get:
      description: Retrieve a user, including its details and roles.
      operationId: api.getUsersByID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/models.UserResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user by ID (admin only).
      tags:
      - users
    put:
      description: Update user details (only owner/admin).
      operationId: api.updateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user.
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
